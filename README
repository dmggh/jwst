1. General server setup flow is:

# On server VMs, initialize the environment from ~crds/.setenv,  a *global* rc file
# shared by all VMs which should only be changed with caution.

% source ~/.setenv  
% server  # alias to cd to CRDS_server source code

Setup the server python stack by building the crds packages list from the installer3 system.
Look at host/build_stack for the process of building the stack.
The master installer3 mercurial repo is at /eng/ssb/crds/installer3.  Copies are on each VM.

There 4 CRDS server "use cases".

django    Django/SQLite django server
dev  Apache/VM/Isilon/MySQL/Proxy/mod_wsgi development server
test   Apache/VM/Isilon/MySQL/Proxy/mod_wsgi pipeline test server
prod   Apache/VM/Isilon/MySQL/Proxy/mod_wsgi pipeline production server

# Install the code as indicated by the appropriate config file from
# sources/configs/config.<observatory>.<server_kind>
./install [hst|jwst]  [django|dev|test|prod]

# Possibly re-run install if the first run failed due to missing packages
./install [hst|jwst]  [django|dev|test|prod]

# Initilize the CRDS catalog with existing reference files, deliver initial
# set of mappings.   Generally this is no longer done,  except maybe for private Django dev-server installations.
# Enter system passwords.
./init [hst|jwst] [django|dev|test|prod]
<enter password for test user>

2. Procedure for starting the sever:

% ./run

3. Procedure for update not affecting the database:

% ./rerun [hst|jwst] [django|dev|test|prod]

4. Procedure for running a command line / ipython environment for debug

% ./shell

5. Procedure for running HST server self-tests.

% ./run hst django
% ./runtest hst django   (2nd terminal)

or 

6. Procedure for running Django management commands

% ./manage <additional parameters to django-admin.py>

e.g.


7. Database commands

% ./manage dbshell  # to open a SQL prompt to the CRDS server database

% ./manage dbbackup  # to create a django-dbbackup server database backup
% ./manage dbrestore <backup file>   # to revert to an older version of the database


8. Mirroring

e.g. copy the test server (hst-crds-test, tlhstcrdsv1) down to the dev server (hst-crds-dev, dlhstcrdsv1).

This replicates the database and syncs the cache and server support directories.   This is only recommended
in a *downward* ops -> test -> dev direction.  It stops and restarts the server as required.

First,  on the source server:

# login tlhstcrdsv1
% server
% tools/backup_server

That puts required backup files in global ~/backups

Second,  on the destination server:

# login dlhstcrdsv1
% server
% tools/mirror_server hst test https://hst-crds-test.stsci.edu |& tee mirror_server.hst.test.err

where the parameters to mirror_server specify the *source* server and the destination is
implicitly the server of the current login.

