1. General server setup flow is:

# Install third party database components, pyodbc and unixODBC/FreeTDS stack,
# as well as additional django applications.   This is a long (minutes) slow
# compile of third_party code. 
./init_pkgs [hst|jwst] [django|dev|test|prod]

# django    Django/SQLite django server
# dev  Apache/VM/Isilon/MySQL/Proxy/mod_wsgi development server
# test   Apache/VM/Isilon/MySQL/Proxy/mod_wsgi pipeline test server
# prod   Apache/VM/Isilon/MySQL/Proxy/mod_wsgi pipeline production server

# Install the code as indicated by the appropriate config file from
# sources/configs/config.<observatory>.<server_kind>
./install [hst|jwst]  [django|devtest|prod]

# Possibly re-run install if the first run failed due to missing packages
./install [hst|jwst]  [django|dev|test|prod]

# Initilize the CRDS catalog with existing reference files, deliver initial
# set of mappings.
# Enter system passwords.
./init [hst|jwst] [django|dev|test|prod]
<enter password for test user>

2. Procedure for starting the sever:

% ./run

3. Procedure for update not affecting the database:

% ./rerun [hst|jwst] [django|dev|test|prod]

4. Procedure for running a command line / ipython environment for debug

% ./shell

5. Procedure for running HST server self-tests.

% ./run hst django
% ./runtest hst django   (2nd terminal)

or 

6. Procedure for running Django management commands

% ./manage <additional parameters to django-admin.py>

e.g.


7. Database commands

% ./manage dbshell  # to open a SQL prompt to the CRDS server database

% ./manage dbbackup  # to create a django-dbbackup server database backup
% ./manage dbrestore <backup file>   # to revert to an older version of the database


