#! /bin/sh -x

# This install script is heavily based on the PyETC install script
# CRDS is intended to use the same LAMP stack as pyetc, with emphasis on Python

source ./make_env # $1 $2 $3 $4 $5

# This is required in production environments which don't include Django in
# the main Python stack.
# ./init_pkgs $1 $2 $3 $4 $5

. ./make_env.tmp
# rm make_env.tmp

if [ X$1 = X-r ]
then
	rc=1
else
	rc=0
fi

case "$noreload"
in
[tT]rue)        noreload="--noreload"
        ;;
esac

###
### eliminate excess verbosity in the setup.py steps so we can see any
### other errors that come out
###
pyquiet=-q

###
### create the install directory
###

secret=6700
private_ro=6750
private_rw=6770
public=6755
immutable=444

function create_dir {
    mkdir -p $2 $3 $4 $5 $6 $7 $8 $9
    chmod $1 $2
}

# Where CRDS writes out delivery catalog files when delivering files
# to downstream systems like the archive.  Catalog files persist.
create_dir $private_ro $CRDS_CATALOG_DIR

# The primary working copy for deliveries, nominally owned by CRDS.
# Delivery files are links which last until received by OPUS.
create_dir $private_rw $CRDS_DELIVERY_DIR

# The temporary directory where uploaded files are initially stored.
create_dir $public $FILE_UPLOAD_TEMP_DIR

# The temporary directory where CRDS/CDBS team deliverers can scp files.
create_dir $private_rw $CRDS_INGEST_DIR
# This is a drop-off dir for hand crafted SSB-made references and mappings.
create_dir $private_rw ${CRDS_INGEST_DIR}_ssb

# The directory where dynamic mapping bundles are kept
create_dir $private_ro $CRDS_ARCHIVE_CACHE_DIR

# This is the server cache and reference staging area.
create_dir $public $map_path_full
create_dir $public $ref_path_full

create_dir $secret $install_dir
create_dir $secret $install_dir/python/bin
# This is a place for matplotlib to store cache files.  We don't actually
# try to put any config there, and only the apache server knows to use it.
create_dir $secret $install_dir/mplconfigdir


###
### special cases for each type of web server we might be using
###
case "$servertype"
in

# apache with mod_python
mod_wsgi)

	create_dir $secret $install_dir/server
        create_dir $secret $install_dir/server/logs 
        create_dir $secret $install_dir/server/run 
        create_dir $secret $install_dir/server/conf  
        create_dir $secret $install_dir/server/wsgi-scripts

        cp servers/httpd.mod_wsgi.conf $install_dir/server/conf/httpd.conf
	cp servers/ssl.conf $install_dir/server/conf/ssl.conf
	cp servers/*.wsgi $install_dir/server/wsgi-scripts
   
	apache_version=`/usr/sbin/httpd -v | sed -n 's?Server version: Apache/??p'`
	case "$apache_version"
	in
	2.2.*)
		dso_version=2.2
		;;
	2.0.*)
		dso_version=2.0
		;;
	*)
		echo do not have a config for this apache version -"$apache_version"-
		exit 1
		;;
	esac

	cat servers/apache_dso.$dso_version >>  $install_dir/server/conf/httpd.conf

	if [ "$apachemod" = "" ]
	then
		apachemod=$third/lib/apache
		export apachemod
		cp ${install_dir}/lib/mod_wsgo.so ${apachemod}
	fi	
	if [ ! -f $apachemod/mod_wsgi.so ]
	    then
	    echo "WARNING: NO MOD_WSGI FOUND (possibly installed later by init_pkgs)"
	fi

#         python ${SERVER_SOURCES}/sh_config.py add_ldap_auth >tmp
#        . tmp

        if [ "$add_ldap_auth" = "True" ]
        then
		if [ "$rc" = 1 ]
		then
			echo do not use authentication in a release candidate system
			exit 1
		fi
                cat servers/httpd.add_ldap >> $install_dir/server/conf/httpd.conf
        fi

        sed -e "s?SUB_APACHEMOD?$apachemod?g" -e "s?SUB_DIR?$install_dir?g" -e "s?SUB_PORT?$port?g" -e "s?SUB_CDBS?$PYSYN_CDBS?g"  -e "s?SUB_CRDS_PATH?$CRDS_PATH?g" < $install_dir/server/conf/httpd.conf > tmp
        mv tmp $install_dir/server/conf/httpd.conf

        # create the shell script that runs the server.  We want everything that
        # has gotten in to env.csh so far, but nothing that comes later.  (Everything
        # that comes later is for debug environments; we don't want to contaminate
        # our production environment with possible dependencies on that data.)
        (
        echo '#!/bin/csh'
        cat env.csh
        echo "/usr/sbin/httpd -f $install_dir/server/conf/httpd.conf"
        ) > run

        echo 'kill `cat '$install_dir'/server/run/httpd.pid` ' > stop


        ln -fs /etc/httpd/modules $install_dir/server/

        ln -fs /etc/httpd/conf/magic $install_dir/server/conf/

        # add debug-only values to env.csh
        (
        echo 'setenv DJANGO_SETTINGS_MODULE crds.server.settings'
        echo 'setenv PYSYN_CDBS '$PYSYN_CDBS
        ) >> env.csh

        ;;

# apache with mod_python
mod_python)

	create_dir $secret $install_dir/server/logs $install_dir/server/run $install_dir/server/conf

        cp servers/httpd.mod_python.conf $install_dir/server/conf/httpd.conf

	apache_version=`/usr/sbin/httpd -v | sed -n 's?Server version: Apache/??p'`
	case "$apache_version"
	in
	2.2.*)
		dso_version=2.2
		;;
	2.0.*)
		dso_version=2.0
		;;
	*)
		echo do not have a config for this apache version -"$apache_version"-
		exit 1
		;;
	esac

	cat servers/apache_dso.$dso_version >>  $install_dir/server/conf/httpd.conf

        python ${SERVER_SOURCES}/sh_config.py add_ldap_auth > tmp
        . tmp

	if [ "$apachemod" = "" ]
	then
		apachemod=$third/lib/apache
		export apachemod
		if [ ! -f $apachemod/mod_python.so ]
		then
			echo NO MOD_PYTHON FOUND
			echo must setenv apachemod to a directory that contains the mod_python.so file
			exit 1
		fi
	fi


        if [ "$add_ldap_auth" = "True" ]
        then
		if [ "$rc" = 1 ]
		then
			echo do not use authentication in a release candidate system
			exit 1
		fi
                cat servers/httpd.add_ldap >> $install_dir/server/conf/httpd.conf
        fi

        sed -e "s?SUB_APACHEMOD?$apachemod?g" -e "s?SUB_DIR?$install_dir?g" -e "s?SUB_PORT?$port?g" -e "s?SUB_CDBS?$PYSYN_CDBS?g"  < $install_dir/server/conf/httpd.conf > tmp
        mv tmp $install_dir/server/conf/httpd.conf


        # create the shell script that runs the server.  We want everything that
        # has gotten in to env.csh so far, but nothing that comes later.  (Everything
        # that comes later is for debug environments; we don't want to contaminate
        # our production environment with possible dependencies on that data.)
        (
        echo '#!/bin/csh'
        cat env.csh
        echo "/usr/sbin/httpd -f $install_dir/server/conf/httpd.conf"
        ) > run

        echo 'kill `cat '$install_dir'/server/run/httpd.pid` ' > stop


        ln -fs /etc/httpd/modules $install_dir/server/

        ln -fs /etc/httpd/conf/magic $install_dir/server/conf/

        # add debug-only values to env.csh
        (
        echo 'setenv DJANGO_SETTINGS_MODULE crds.server.settings'
        echo 'setenv PYSYN_CDBS '$PYSYN_CDBS
        ) >> env.csh

        ;;

# django development server
django)
	if [ "$rc" = 1 ]
	then
		echo do not use django server for release candidate
		exit 1
	fi

        # hostname=`hostname`
	hostname=localhost
        (
        echo 'setenv DJANGO_SETTINGS_MODULE crds.server.settings'
        echo '# we are runnning in the context of the django test server'
        echo 'setenv PYSYN_CDBS '$PYSYN_CDBS
        echo 'setenv CRDS_DJANGO_SERVER 1'
        ) >> env.csh

        (
        echo '#!/bin/csh'
        echo 'source env.csh'
        echo "cd $install_dir/python/lib/python/crds/server"
        echo "exec python manage.py runserver $noreload $hostname:$port"
        ) > run
        (
        # yes, it's ugly.

        # It turns into python -c to load /shutdown from the server.  In the server,
        # the process sends itself a signal to cause a shutdown.  This means that
        # we never get an HTTP response, so the python script prints an exception,
        # which is redirected to /dev/null

        echo python -c '"'import urllib ';' urllib.urlopen'('"'"http://$hostname':'$port/shutdown"'"')"' '>& /dev/null'

        ) > stop

        ;;

# anything else is unrecognized
*)
        echo ''
        echo unknown server type $servertype
        echo ''
        # do not need a default case for server type after this
        exit 1
        ;;
esac

#
chmod 755 ./run ./stop

# copy over the static files
if [ `uname` = 'Linux' ]
then
        cpio_quiet='--quiet'
else
        cpio_quiet=''
fi

# find htdocs | grep -v '\.svn' | cpio $cpio_quiet -oc | ( cd $install_dir ; cpio $cpio_quiet -icdum  )

case "$rc"
in
1)	rm -f $install_dir/htdocs/status.shtml
	;;
esac

case "$debug_javascript"
in
[Tt]rue)
        # copy the debug value into the
        sed 's/^enable_debug=.*$/enable_debug=true;/' <  htdocs/etcstatic/validate_general.1.js  > $install_dir/htdocs/etcstatic/validate_general.1.js
        ;;
esac

###
### install the python packages that we use
###

#  INSTALL CORE CRDS CLIENT LIBRARY
(cp save_version ../CRDS;  cd ../CRDS; ./install --home $install_dir/python)
(cd sources; python setup.py install --home $install_dir/python)

###
### maybe, initialize the database
###

echo "Syncing database"
case "$dbtype"
in
sqlite)
        ( cd $install_dir/python/lib/python/crds/server ; python manage.py syncdb )
        if [ "$servertype" = 'mod_python' ]
        then
                echo ''
                echo ERROR: the sqlite database driver hangs when run in a mod_python server
                echo ''
        fi
        ;;

mssql)
        ( cd $install_dir/python/lib/python/crds/server ; python manage.py syncdb )
	;;
mysql)
        ( cd $install_dir/python/lib/python/crds/server ; python manage.py syncdb )
	;;
*)
        echo ""
        echo "install does not recognize dbtype $dbtype"
        echo "you may need to:"
        echo " source env.csh"
        echo " cd $install_dir/python/lib/python/crds/server ; python manage.py syncdb "
        echo "but probably you just have an error in config.py"
        echo ""
        ;;

esac

echo "Done syncing db"

# Install prototype mappings (no serial number) in server cache automatically
# Deliver "real" or cloned mappings and references using submit references followed by submit
# mappings.
mapping_source_dir=`python tools/get_mapping_dir.py ${observatory}`
echo
echo "Copying prototype mappings from ${mapping_source_dir} to ${map_path_full}"
echo
create_dir $public ${map_path_full}
set +e # tolerate errors
for mapping in `ls -1 ${mapping_source_dir}/*.*map | grep -v 0`;
do
  cp -v ${mapping} ${map_path_full} 2>/dev/null 1>/dev/null
done
set -e # fail on errors

# chmod $immutable ${map_dest}/*.*map

###
### tell the user what we did
###

echo ''
echo Installed in:
echo '  '$install_dir
echo URL is
echo '  'http://`hostname`:$port
echo 'to start the server:'
echo '  './run
echo 'to stop the server:'
case "$servertype"
in
django)
        echo '  'type control-c
        ;;
*)
        echo '  './stop
        ;;
esac

echo 'to get an environment like the web server will see:'
echo '  source env.csh'

echo ''

./save_version >sources/svn_version.py

case ${server_mode}
    in
    "test" | "prod") 
	echo "Setting permissions"

	chmod $public ${ref_path}
	chmod $public ${ref_path_full}
	chmod -f $immutable ${ref_path_full}/*

	chmod $public ${map_path}
	chmod $public ${map_path_full}
	chmod -f $immutable ${map_path_full}/*

	chmod $secret ${install_dir}
	for dir in $install_dir/*
	do
	    chmod $secret $dir  # default to secret
	done
	chmod $private_ro ${CRDS_CATALOG_DIR}
	chmod $private_ro ${CRDS_ARCHIVE_CACHE_DIR}   # Where mapping bundles go
	for dir in ${CRDS_DELIVERY_DIR} ${CRDS_INGEST_DIR} ${CRDS_INGEST_DIR}_ssb ${FILE_UPLOAD_TEMP_DIR}
	do
	    chmod $private_rw $dir
	    chmod g+s $dir
	done
	;;
    "dev" )
	;;
esac

case ${observatory}
    in
    jwst)
	echo "Installing jwst prototype references"
	create_dir $public ${ref_path_full}
	cp -v ../jwst_references/*.fits ${ref_path_full}
esac

echo "Silently installing static files."
./manage collectstatic <<EOF
yes
EOF
