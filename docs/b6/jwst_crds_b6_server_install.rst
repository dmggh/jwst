========
Overview
========

These notes describe initializing a CRDS web server VM and server.

------------------------
Initial resource request
------------------------
Setting up a CRDS server involves several different activities:

1. Virtual machine setup
2. Server file system setup (Isilon storage)
3. Database setup
4. SSL and proxy setup

-------------------
SSL and Proxy setup
-------------------

The ITSD division configures server proxies that present the CRDS public
interface to the internet.   The server proxy request for CRDS for build-6
was:

        proxy     internal hostname / https port
    -------------------- -------------------------------
    jwst-crds-b6it.stsci.edu            --> iljwdmsccrdsv1.stsci.edu:8001

--------------------
CRDS UNIX User/Group
--------------------

The CRDS server runs as user "crds" with group "crdsoper."   The "crds" user
only supports sudo logins from other users,  not direct login.   File submitters
and the archive file delivery interface (CRDS pipeline) also

Logins:

    Either direct login and password for crds
            -or-
    Login for jmiller + sudo to crds,  more sudo users coming later

File permissions/ownership:

    user    crds
    group   crdsoper

    with g+s

Storage:

    50G of host-specifc storage (each) mounted at:
         /crds/data1                      (same path, one volume per server)

    50G isolated /home storage:
         /home/crds       (if isolated file system, clone from networked/shared pljwstcrdsv1:/home/crds)

    2.5T of Isilon storage mounted at:
         /ifs/crds/jwst/b6it              (iljwdmsccrdsv1 only)

The CRDS JWST I&T servers are supported by dedicated database virtual machines
running MySQL servers. Provisisioning the virtual machines is handled by ITSD
but database accounts are required as follows:

    user:
            jwstcrds

     server:  MySQL

        B6 database VM     iljwdmsccrdsdbv.stsci.edu   port 3306
        
    databases:
            crds_jwst_b6it
            test_crds_jwst_b6it

    grants:
            GRANT USAGE ON *.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'
            IDENTIFIED BY PASSWORD 'XXX'
            GRANT ALL PRIVILEGES ON `crds\_jwst_b6it`.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'
            GRANT ALL PRIVILEGES ON `test\_crds\_jwst_b6it`.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'

            GRANT USAGE ON *.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'
            IDENTIFIED BY PASSWORD 'XXX'
            GRANT ALL PRIVILEGES ON `test\_crds\_jwst_b6it`.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'
            GRANT ALL PRIVILEGES ON `crds\_jwst_b6it`.* TO 'jwstcrds'@'iljwdmsccrdsv1.stsci.edu'

-------------------
Source Installation
-------------------

Two source directories need to be set up on the CRDS server,  the client source
and the server source.   See the corresponding client instructions for information
on insalling the CRDS client s/w.

NOTE: you must also install the CRDS client s/w in a parallel directory as shown below

Using the delivered source code zipfile:

% cd /crds/data1/iljwdmsccrdsv1
% unzip jwst_crds_build6.zip
% cp jwst_crds/build6/CRDS-client-b6 CRDS
% cp jwst_crds/build6/CRDS-server-B6 CRDS_server

Obtaining the build-6 CRDS server source code from subversion:

% svn co https://aeon.stsci.edu/ssb/svn/crds_server/branches/jwst-build-6-1 CRDS_server

and installing the combined client and server source code.

% cd CRDS_server
% ./install jwst b6it 

# assumes client is installed in parallel directory at ../CRDS

-----------------------
Key Configuration Files
-----------------------

As an overview, these files within the CRDS_server source code checkout configure server setup:

env.csh    (critical to source into shell,  generated by e.g. ./install jwst b6it )
host/dot_setenv
host/dot_aliases
sources/configs/config.b6it.jwst.py
sources/configs/database.b6it.jwst.py
servers/*

----------
VM .setenv
----------

If there is no CRDS .setenv installed,  do e.g.:

% cp /crds/data1/iljwdmsccrdsv1/CRDS_server/host/dot_setenv $HOME/.setenv
% cp /crds/data1/iljwdmsccrdsv1/CRDS_server/host/dot_alias $HOME/.alias

In any case,  a section for the new VM(s) needs to be added to $HOME/.setenv,  e.g.:

       case iljwdmsccrdsv1:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE b6it
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

Logout and log back in and typing the alias "server" should now take you to the
CRDS_server checkout from above.

Each execution of the ./install script in CRDS_server will replace the .setenv and .alias
in $HOME with those in the source distribution.  Edit them as dot_setenv and dot_alias
under CRDS_server/host first,  then execute the ./install script to install them into $HOME.

--------------------------
Create Server Config Files
--------------------------

Every CRDS server is customized by two files defined in the
CRDS_server/sources/configs directory which define file system paths,
provided and required URLs, database details, etc.

As delivered for JWST B6, the config.b6it.jwst.py and database.b6it.jwst.py
have already been created and customized.

The general process for setting up a new server variant is to copy
from another observatory and/or use case to the new use case and edit
the contents to customize for the new server.

% server
% cd sources/configs
% cp config.ops.jwst.py config.b6it.jwst.py    
% cp database.ops.jwst.py database.b6it.jwst.py

Edit/customize the new b6it files and add them to subversion.   The required
facts come from discussions with ITSD during the initial resource setup.

-----------------------
CRDS Server Stack Build
-----------------------

The CRDS server runs on a custom Python stack installed using a combination
of Continuum's Conda distribution and custom CRDS source packages. To rebuild
the CRDS server Python stack,  do:

% mkdir /crds/data1/iljwdmsccrdsv1/crds_stacks
% cd /crds/data1/iljwdmsccrdsv1/crds_stacks
% cp -r /eng/ssb/crds/installer4 .
% server
% host/build_conda  |& tee build_stack.conda.err

"conda" is this stack's indentifying "version" in both .setenv and build_stack,
the stack is named "crds_conda".

See Conda and CRDS maintained package dependency lists below.

------------------------
CRDS Server Installation
------------------------

The CRDS source code is installed independently of the Python stack to a
different directory.   Once the .setenv and .alias files are installed,
and you've logged back in,  you should be able to install the CRDS server
as follows:

% server
% ./install jwst b6it

This installs a JWST server for the b6it use case.  Also  b5it, dit, dev, test, ops

This results in a server setup with an empty database.   Early server
initializations were continued using the "init" script.   Later server 
initializations have been performed by cloning the database and server file
area of the operational server using the server mirroring tool:

% server
% mirror_server jwst ops https://jwst-crds.stsci.edu |& tee mirror_server.jwst.ops.err

Mirroring the server as above will restore the database backup of the OPS server to
the local B6IT server and make the server file system as consistent as possible.
Missing rules or references in the local server's file cache are downloaded
from the specified source (OPS) server.  Undelivered files from OPS are placed in the 
delivery area.

----------------------
Starting up the Server
----------------------

The server is nominally started as follows from the server source directory:

% ./run jwst b6it

This starts both the Apache server and memcached.

-------------------
Stopping the Server
-------------------

The server is nominally stopped as follows from the server source directory:

% ./stop jwst b6it

This stops both the Apache server and memcached.


-------------------
Cycling the Server
-------------------

The common practice of stopping, re-installing, and restarting
the CRDS server is done as follows from the server source directory:

% ./rerun

The observatory and use case do not have to be specified with ./rerun.

-------------------------
Running server unit tests
-------------------------

The server unit tests can be run as follows:

% ./runtests

The observatory and use case do not have to be specified with ./runtests.

runtests nominally produces an output file like "runtests.jwst.b6it.err" in
addition to console output.

runtests takes the server offline by switching to a backup port (8002?) unless
the "live" parameter is specified.  when tests havec completed runtests 
restores the server to it's normal port.  killing tests with <control-c>
can result in the server staying configured for the backup port.  Examine
and fix using "svn diff" and/or "svn revert -R" and ./rerun.


------------------------------------------------
Versions of Conda Packages Installed for Build-6
------------------------------------------------

# packages in environment at /crds/data1/iljwdmsccrdsv1/crds_stacks/crds_conda:
#
anaconda-client           1.4.0                    py27_0  
asdf                      1.1.0.dev722              <pip>
astroid                   1.4.4                    py27_0  
astropy                   1.1.2               np111py27_0  
astropy-helpers           1.1                       <pip>
backports                 1.0                      py27_0  
backports.shutil-get-terminal-size 1.0.0                     <pip>
cairo                     1.12.18                       6  
clyent                    1.2.2                    py27_0  
conda                     4.0.6                    py27_0  
conda-env                 2.4.5                    py27_0  
coverage                  4.0.3                    py27_0  
crds                      6.0.1                     <pip>
crds.server               6.0.0                     <pip>
curl                      7.45.0                        0  
cycler                    0.10.0                   py27_0  
cython                    0.24                     py27_0  
d2to1                     0.2.12.post1              <pip>
decorator                 4.0.9                    py27_0  
django                    1.8.3                     <pip>
django-background-task    0.1.8                     <pip>
django-dbbackup           1.80.1                    <pip>
django-json-rpc           0.6.2                     <pip>
django-nose               1.4.2                     <pip>
django-smuggler           0.7.0                     <pip>
enum34                    1.1.6                    py27_0  
expat                     2.1.0                         0  
fontconfig                2.11.1                        5  
freetype                  2.5.5                         0  
functools32               3.2.3.post2               <pip>
future                    0.14.3                    <pip>
get_terminal_size         1.0.0                    py27_0  
git                       2.6.4                         0  
gwcs                      0.6.dev155                <pip>
ipython                   4.2.0                    py27_0  
ipython-genutils          0.1.0                     <pip>
ipython_genutils          0.1.0                    py27_0  
jsonschema                2.5.1                     <pip>
jwst-lib.astdata          0.0                       <pip>
jwst-lib.fits-extensions  0.0                       <pip>
jwst-lib.models           1.1                       <pip>
jwst-lib.pipeline-models  0.1                       <pip>
jwst-lib.stpipe           0.6.0                     <pip>
lazy-object-proxy         1.2.1                    py27_0  
libpng                    1.6.17                        0  
libxml2                   2.9.2                         0  
libxslt                   1.1.28                        0  
logilab-common            1.0.2                    py27_0  
lxml                      3.6.0                    py27_0  
matplotlib                1.5.1               np111py27_0  
mistune                   0.7.1                     <pip>
mkl                       11.3.3                        0  
modernize                 0.4                       <pip>
mysql-connector-python    2.0.3                    py27_0  
mysql-python              1.2.5                    py27_0  
nose                      1.3.7                     <pip>
numpy                     1.11.0                   py27_1  
openssl                   1.0.2g                        0  
parsley                   1.2                       <pip>
path.py                   8.2.1                    py27_0  
pexpect                   4.0.1                    py27_0  
pickleshare               0.5                      py27_0  
pip                       8.1.1                    py27_1  
pixman                    0.32.6                        0  
ptyprocess                0.5                      py27_0  
py                        1.4.31                    <pip>
pycairo                   1.10.0                   py27_0  
pycosat                   0.6.1                    py27_0  
pycrypto                  2.6.1                    py27_0  
pylint                    1.5.4                    py27_0  
pymysql                   0.6.7                    py27_0  
pyodbc                    3.0.10                   py27_0  
pyparsing                 2.1.1                    py27_0  
pyqt                      4.11.4                   py27_1  
pytest                    2.9.1                     <pip>
python                    2.7.11                        0  
python-dateutil           2.5.3                    py27_0  
python-memcached          1.54                      <pip>
pytz                      2016.4                   py27_0  
pyyaml                    3.11                     py27_1  
qt                        4.8.7                         1  
readline                  6.2                           2  
requests                  2.10.0                   py27_0  
setuptools                20.3                     py27_0  
simplegeneric             0.8.1                    py27_0  
singledispatch            3.4.0.3                  py27_0  
sip                       4.16.9                   py27_0  
six                       1.10.0                   py27_0  
sqlite                    3.9.2                         0  
stsci.distutils           0.3.7                     <pip>
stsci.sphinxext           1.2.1                     <pip>
tk                        8.5.18                        0  
traitlets                 4.2.1                    py27_0  
unixodbc                  2.3.4                         0  
wheel                     0.29.0                   py27_0  
wrapt                     1.10.6                   py27_0  
yaml                      0.1.6                         0  
zlib                      1.2.8                         0  

-------------------------------------
CRDS Meta Environment Custom Packages
-------------------------------------

CRDS also maintains some packages in it's own source tree managed
by git.  the sha1sum and last date of installation are recorded
for packages installed using this system as part of build_conda.

{'Django': {'date': '2016-05-21 03:08:04.37',
            'sha1': '229dae14aa42169e2e2a6ecb1e00e75f0d57ed35',
            'version': (1, 8, 3, 0, 0)},
 'PyYAML': {'date': '2016-05-21 03:09:41.44',
            'sha1': '564811907467381851db6518eab40632a8210caf',
            'version': (3, 11, 0, 0, 0)},
 'anaconda-client': {'date': '2016-05-21 03:08:23.51',
                     'sha1': 'none',
                     'version': (0, 0, 0, 0, 0)},
 'asdf': {'date': '2016-05-21 03:10:11.33',
          'sha1': '2b098746f85db3d61184032c887079a5c8588356',
          'version': (0, 0, 0, 0, 0)},
 'astdata': {'date': '2016-05-21 03:07:44.41',
             'sha1': 'fd1a8c8ffee0f85ee35bd2564f398d5a8f0b5f1a',
             'version': 'unknown'},
 'astropy': {'date': '2016-05-21 03:07:23.45',
             'sha1': 'none',
             'version': 'unknown'},
 'astropy-helpers': {'date': '2016-05-21 03:10:05.55',
                     'sha1': 'ff1a0300562aa98ab21469c563f4404c602891cf',
                     'version': (0, 0, 0, 0, 0)},
 'cfitsio': {'date': '2016-05-21 03:09:24.51',
             'sha1': '2933a0bd51403eb9c42df604b2e55234e1399f40',
             'version': (3360, 0, 0, 0, 0)},
 'coverage': {'date': '2016-05-21 03:06:17.55',
              'sha1': 'none',
              'version': 'unknown'},
 'cython': {'date': '2016-05-21 03:06:54.37',
            'sha1': 'none',
            'version': 'unknown'},
 'django-background-task': {'date': '2016-05-21 03:08:07.85',
                            'sha1': 'c9bede56a68a6d6960fdfa8318881441c40e57e3',
                            'version': (0, 1, 8, 0, 0)},
 'django-dbbackup': {'date': '2016-05-21 03:08:06.27',
                     'sha1': '288be43db483d189c69f838636f351cd8233fbfa',
                     'version': (1, 80, 1, 0, 0)},
 'django-json-rpc': {'date': '2016-05-21 03:08:06.16',
                     'sha1': 'b516f31f3d36894da8ad4ddf2783951e1a0a2531',
                     'version': (0, 0, 0, 0, 0)},
 'django-nose': {'date': '2016-05-21 03:08:11.35',
                 'sha1': '4c101f999a48de63015c99a8114c49fbee09a58f',
                 'version': (1, 4, 2, 0, 0)},
 'django-smuggler': {'date': '2016-05-21 03:08:15.59',
                     'sha1': '4b24739d34c15beb96b50e3035842a4b95519265',
                     'version': (0, 0, 0, 0, 0)},
 'fits_extensions': {'date': '2016-05-21 03:07:42.54',
                     'sha1': '6bfb79a1a4230a118f7323671e9e984b8c4d0768',
                     'version': 'unknown'},
 'fitsverify': {'date': '2016-05-21 03:09:25.07',
                'sha1': 'de5ebed16018344c23c1ac712e971b7b30123425',
                'version': (4, 17, 0, 0, 0)},
 'freetds-dev': {'date': '2016-05-21 03:11:45.39',
                 'sha1': '249ad94df6cf3e43a4fc95da6e7eba021a186ba1',
                 'version': (0, 92, 405, 0, 0)},
 'future': {'date': '2016-05-21 03:07:26.85',
            'sha1': '44fdd9323913d21068b29ecda795a98c07dc8a40',
            'version': (0, 14, 3, 0, 0)},
 'git': {'date': '2016-05-21 03:06:23.78',
         'sha1': 'none',
         'version': 'unknown'},
 'gwcs': {'date': '2016-05-21 03:07:51.83',
          'sha1': '496230fe14e6cf8cba43f5cd856ff3b9436f08cc',
          'version': 'unknown'},
 'ipython': {'date': '2016-05-21 03:07:18.26',
             'sha1': 'none',
             'version': 'unknown'},
 'jsonschema': {'date': '2016-05-21 03:09:44.12',
                'sha1': 'd6d4c03ff0b6b196ffe860b016b617728629ede8',
                'version': (0, 0, 0, 0, 0)},
 'libevent': {'date': '2016-05-21 03:09:05.91',
              'sha1': '2337923ddd4473ffd8bac0807e04ef8b9f0c5756',
              'version': (2, 0, 21, 0, 0)},
 'lxml': {'date': '2016-05-21 03:08:18.88',
          'sha1': 'none',
          'version': 'unknown'},
 'matplotlib': {'date': '2016-05-21 03:07:14.03',
                'sha1': 'none',
                'version': 'unknown'},
 'memcached': {'date': '2016-05-21 03:09:13.41',
               'sha1': '32a798a37ef782da10a09d74aa1e5be91f2861db',
               'version': (1, 4, 24, 0, 0)},
 'mistune': {'date': '2016-05-21 03:10:02.51',
             'sha1': 'df3107de7da3f5343281f54b2080d26273adbb45',
             'version': (0, 0, 0, 0, 0)},
 'mod_wsgi': {'date': '2016-05-21 03:08:31.55',
              'sha1': 'acda762042ca021b900a9951b66fd6b87dd3a852',
              'version': (3, 4, 0, 0, 0)},
 'models': {'date': '2016-05-21 03:07:40.70',
            'sha1': 'aec3f75f0b8c188512a44b6fed0bd03aa56f74a7',
            'version': 'unknown'},
 'modernize': {'date': '2016-05-21 03:07:24.23',
               'sha1': '494e0263eabb9ff75937fa6e9c721554f03eff26',
               'version': (0, 4, 0, 0, 0)},
 'mysql-connector-python': {'date': '2016-05-21 03:11:49.90',
                            'sha1': 'none',
                            'version': (0, 0, 0, 0, 0)},
 'mysql-python': {'date': '2016-05-21 03:11:56.69',
                  'sha1': 'none',
                  'version': (0, 0, 0, 0, 0)},
 'numpy': {'date': '2016-05-21 03:06:51.35',
           'sha1': 'none',
           'version': 'unknown'},
 'parsley': {'date': '2016-05-21 03:08:23.75',
             'sha1': '74077da63c979cab422dcb3b7aea2df6d2ca9440',
             'version': (0, 0, 0, 0, 0)},
 'pipeline_models': {'date': '2016-05-21 03:07:48.29',
                     'sha1': 'b10c513ca987eb72eae6e760e31cb048a61e1dbc',
                     'version': 'unknown'},
 'pylint': {'date': '2016-05-21 03:06:19.99',
            'sha1': 'none',
            'version': 'unknown'},
 'pymysql': {'date': '2016-05-21 03:11:53.37',
             'sha1': 'none',
             'version': (0, 0, 0, 0, 0)},
 'pyodbc': {'date': '2016-05-21 03:12:02.66',
            'sha1': '70898ae1170e360af4101b913f23115fa2cec62f',
            'version': (3, 0, 7, 0, 0)},
 'python': {'date': '2016-05-21 03:09:41.55',
            'sha1': '43bd9415c57d40e4e056169a64ac20a3691a9ef7',
            'version': (0, 0, 0, 0, 0)},
 'python-memcached': {'date': '2016-05-21 03:09:14.25',
                      'sha1': '1a7064f913143d0279a4bd8cfc0203e30489a47a',
                      'version': (1, 54, 0, 0, 0)},
 'pytz': {'date': '2016-05-21 03:08:14.01',
          'sha1': '847536ab68c7258e891bfce89a516c39dae1ff76',
          'version': (2014, 9, 0, 0, 0)},
 'requests': {'date': '2016-05-21 03:08:20.92',
              'sha1': 'none',
              'version': 'unknown'},
 'stpipe': {'date': '2016-05-21 03:07:30.67',
            'sha1': 'aab46d197708ea2c490b5b44f2ab8158a24084bf',
            'version': 'unknown'},
 'stsci.distutils': {'date': '2016-05-21 03:07:29.00',
                     'sha1': 'none',
                     'version': 'unknown'},
 'stsci.sphinxext': {'date': '2016-05-21 03:07:27.64',
                     'sha1': 'none',
                     'version': 'unknown'},
 'unixODBC': {'date': '2016-05-21 03:11:15.36',
              'sha1': '815cbc4f34e1a6d95daf3a5ab74e6ed3a586aad7',
              'version': (2, 3, 1, 0, 0)},
 'yaml': {'date': '2016-05-21 03:09:36.62',
          'sha1': '99251722ff3e4c7e1329c3da6fe2c7501fb5a86c',
          'version': (0, 1, 5, 0, 0)}}

