#! /usr/bin/env python

from __future__ import print_function

import sys
import os.path

import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "crds.server.settings")
django.setup()

import crds
from crds import cmdline, rmap, log, config, heavy_client
from crds.server.interactive import models

class RepairScript(cmdline.ContextsScript):

    description = """Command line script for checking and repairing CRDS Django models."""
        
    def add_args(self):

        self.add_argument("--files", nargs="*", help="Explicitly list files to be checked or repaired")

        self.add_argument("--references", action="store_true", dest="references",
            help="Include the reference files associated with the specifie mappings.")

        self.add_argument('--repair', action='store_true', dest="repair",
            help="Attempt to repair any model defects found.")
	
        self.add_argument('--model-checksum', action='store_true', dest="model_checksum",
            help='Verify that file sha1sums are correct and repair them.')

        self.add_argument('--ignore-fields', nargs="*", dest="ignore_fields", default=(),
            help="Fields to ignore.")
	
	# Could support file determination similar sync:  --all --references --files etc.

	super(RepairScript, self).add_args()

        
    def main(self):
        """Repair files."""
        import django
        django.setup()
        files = self.determine_files()
        defects = self.check_defects(files)
        defects = self.remove_ignored(defects)
        if self.args.repair:
            self.repair_defects(defects)
        else:
            self.print_defects(defects)

    def determine_files(self):
        if self.args.files:
            return self.args.files
        else:
            mappings = self.get_context_mappings()
            references = self.get_context_references() if self.args.references else []
            return mappings + references

    def check_defects(self, files):
        log.info("Checking", len(files), "files for database model defects.")
        return models.check_defects(files=files, verify_checksum=self.args.model_checksum)
    
    def remove_ignored(self, defects):
        cleaned = {}
        for (name, (blob, defects)) in defects.items():
            trimmed = []
            for defect in defects:
                for field in self.args.ignore_fields:
                    if field.lower() in defect.lower():
                        break
                else:
                    trimmed.append(defect)
            if trimmed:
                cleaned[name] = (blob, trimmed)
        return cleaned

    def repair_defects(self, defects_map):
        log.info("Repairing", len(defects_map), "files database model defects.")
	return models.repair_defects(defects_map, verbose=log.get_verbose())

    def print_defects(self, defects_map):
        for (name, (blob, defects)) in defects_map.items():
            print(name, ":", repr(defects))


if __name__ == "__main__":
    RepairScript()()
