#! /usr/bin/env python
#-*-python-*-

import sys
import optparse

import astropy.io.fits as pyfits

from crds.core import config, log, utils

def dump_header(fname, extensions=[0], verbose=False, include_types=False):
    if extensions == "all":
        extensions = list(range(len(pyfits.open(fname))))
    for x in extensions:
        hdr = pyfits.getheader(fname, ext=x)
        for r, val in list(hdr.items()):
            if verbose:
                print(fname, "[" + str(x) + "]:", end="")
            if include_types:
                val = repr(val) + " " + type(val).__name__
            print(r, "=", val)

def main():
    parser = optparse.OptionParser(
        usage="usage: %prog [options] <fits_files...>")
    parser.add_option("-e","--extensions",dest="extensions",
                      help="comma seperated FITS extensions to select",
                      metavar="EXTENSIONS", default="0")
    parser.add_option("-v","--verbose",dest="verbose",
                      help="show file and extension on each line.",
                      action="store_true",
                      default=False)
    parser.add_option("-a","--all",dest="all_extensions",
                      help="show file and extension on each line.",
                      action="store_true",
                      default=False)              
    parser.add_option("-t","--include-types",dest="include_types",
                      help="show file and extension on each line.",
                      action="store_true",
                      default=False)              
    options, args = parser.parse_args()

    try:
        extensions = [int(x) for x in options.extensions.split(",")]
    except:
        if options.extensions[0] == "a":
            extensions = "all"

    if options.all_extensions:
        extensions = "all"

    verbose = options.verbose or (len(extensions) + len(args) > 2)

    include_types = options.include_types
    
    for fname in args:
        fpath = None
        with log.error_on_exception("Error locating pathless file"):
            observatory = utils.file_to_observatory(fname)
            
            fpath = config.locate_file(fname, observatory)
        if fpath is None:
            continue
        if fname != fpath:
            log.info("Locating", repr(fname), "at", repr(fpath), "in CRDS cache.")
        dump_header(fpath, extensions, verbose=verbose, include_types=include_types)

if __name__ == "__main__":
    main()
