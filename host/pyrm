#! /usr/bin/env pysh
#-*-python-*-
from __future__  import print_function

if sys.version_info < (3,0,0):
    input = raw_input


def dynamic_import(package):
    """imports a module specified by string `package` which is
    not known until runtime.   Returns a module/package.
    """
    namespace = {}
    exec("import " + package + " as m", namespace, namespace)
    return namespace["m"]

def find_shortest_module_path(modpath):
    parts = modpath.split("/")
    new = []
    for i, p in enumerate(parts):
        new.append(p)
        if p == "site-packages":
            new.append(parts[i+1])
            break
    whole = os.path.join(*new)
    if whole.endswith(".pyc"):
        whole = os.path.dirname(whole)
    if modpath.startswith("/") and not whole.startswith("/"):
        whole = "/" + whole
    return whole

def main():
    usage("<modules_to_remove...>", 1)
    
    for modname in sys.argv[1:]:
        module = dynamic_import(modname)
        path = find_shortest_module_path(module.__file__)
        ans = input("Remove " + repr(path) + " (yes/no)? ")
        if ans.lower().startswith("y"):
            print("Removing", path)
            sh("rm -rf ${path}")


if __name__ == "__main__":
   main()
