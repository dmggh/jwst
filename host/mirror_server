#! /bin/tcsh 
 
source $HOME/.setenv

# Enable cache updates in server environment set globally to readonly.
setenv CRDS_READONLY_CACHE 0

add_meta_event "Mirrored server with parameters:" $*

# Link from CRDS VM storage to Central Store required to make it appear
# that backup storage is within the Django tree.
set BACKUP_DIR=${CRDS_BACKUPS}/eng_crds
rm -f ${BACKUP_DIR}
ln -s /eng/ssb/crds/latest_backups ${BACKUP_DIR}

set observatory=$1
set server_mode=$2
set mirrored_server_url=$3

set TAIL="${observatory}.${server_mode}"

set database_backup_file=${BACKUP_DIR}/backup.${TAIL}.mysql 
set catalog_file=${BACKUP_DIR}/catalogs.${TAIL}.tar.gz
set deliveries_file=${BACKUP_DIR}/deliveries.${TAIL}.txt
set monitor_reprocessing_file=${BACKUP_DIR}/monitor_reprocessing.${TAIL}.tar.gz

echo "-----------------------------------------------------------"
echo "Shutting down cron activities."""
echo "-----------------------------------------------------------"
crontab </dev/null

echo "-----------------------------------------------------------"
echo "Moving server ${CRDS_PROJECT} ${CRDS_USECASE} to backup URL"
echo "-----------------------------------------------------------"
set_backup_url True

# This replaces the local database with the specified backup, presumably from the master server
echo "-----------------------------------------------------"
# echo "Restoring database from ${BACKUP_DIR}/$database_backup_file"
echo "Restoring database from $database_backup_file"
echo "-----------------------------------------------------"
crds_manage dbrestore --noinput --input-file $database_backup_file -v3 --database default

# This synchronizes the local cache to the master server
setenv CRDS_SERVER_URL $mirrored_server_url

echo "-----------------------------------------------------"
echo "Clearing all local context pickles"
echo "-----------------------------------------------------"
setenv CRDS_USE_PICKLED_CONTEXTS 0
python -m crds.sync --clear-pickles --verbose --stats

echo "-----------------------------------------------------"
echo "Syncing mappings from $mirrored_server_url"
echo "-----------------------------------------------------"
python -m crds.sync --all --repair-files --check-sha1sum --purge-mappings --organize=flat --verbose --stats
echo "Chmod'ing mappings to readonly."
chmod 444 $CRDS_PATH/mappings/${CRDS_PROJECT}/*

echo "-----------------------------------------------------"
echo "Fast-Syncing references from $mirrored_server_url"
echo "-----------------------------------------------------"
# setenv CRDS_DOWNLOAD_CHECKSUMS 0    # Omit sha1sum verification on initial download
python -m crds.sync --all --repair-files --fetch-references --purge-references --purge-mappings --verbose --stats
echo "Chmod'ing references to readonly."
chmod 444 $CRDS_PATH/references/${CRDS_PROJECT}/*

echo "-----------------------------------------------------"
echo "Restoring pickles from $mirrored_server_url"
echo "-----------------------------------------------------"
python -m crds.sync --all --clear-pickles --save-pickles --verbose --stats

# This checks the consistency of the database and server cache and delivery areas
echo "-----------------------------------------------------"
echo "Checking and purging orphan files."
echo "-----------------------------------------------------"
orphan_files #  --purge-delivery-errors

# This recreates the catalogs directory from a backup tarball.
echo "-----------------------------------------------------"
echo "Copying catalog files from backup"
echo "-----------------------------------------------------"
cd ${CRDS_CATALOG_DIR}/..
rm -rf ${CRDS_CATALOG_DIR}
tar zxvf $catalog_file

# This recreates the delivery directory with files from the database which are
# recorded as not-yet-delivered.
echo "-----------------------------------------------------"
echo "Recreating delivery directory and delivering files in state 'delivered'."
echo "-----------------------------------------------------"
cd ${CRDS_DELIVERY_DIR}/..
rm -rf ${CRDS_DELIVERY_DIR}
mkdir deliveries
redeliver_catalogs --files `cat $deliveries_file`

echo "-----------------------------------------------------"
echo "Rechecking orphan files."
echo "-----------------------------------------------------"
orphan_files

echo "-----------------------------------------------------"
echo "Copying monitor_reprocessing files from backup"
echo "-----------------------------------------------------"
if ( -e $monitor_reprocessing_file ) then
    cd ${CRDS_REPROCESSING}/..
    rm -rf ${CRDS_REPROCESSING}
    tar zxvf $monitor_reprocessing_file
else
    echo "No monitor_reprocessing backup file,  skipping."
endif

echo "-----------------------------------------------------"
echo "Re-installing and restarting server ${CRDS_PROJECT} ${CRDS_USECASE}"
echo "-----------------------------------------------------"
set_backup_url False

echo "-----------------------------------------------------------"
echo "Resetting last context state of affected datasets client."
echo "-----------------------------------------------------------"
query_affected_datasets --reset

echo "-----------------------------------------------------------"
echo "Restarting cron activities."
echo "-----------------------------------------------------------"
crontab <${CRDS_SERVER_SCRIPTS}/crontab

echo "-----------------------------------------------------------"
echo "IMPORTANT:  If this mirroring is being run in a TEST or I&T"
echo "pipeline,  there's a very good chance that OPS and TEST or I&T have"
echo "evolved CRDS rules independently.   Such rules files *appear*"
echo "to be already present in the TEST CRDS cache so they are not"
echo "re-synced by default fromi the newly mirrored system.  In reality"
echo "the TEST pipeline has the wrong version of the file, an artifact"
echo "of the last test cycle instead of the official file from OPS,"
echo "very probably with different contents and assignment properties."
echo
echo "REQUIRED:  After mirroring,  the TEST pipeline rules cache needs"
echo "to be 'repaired' to replace the test artifacts with the official"
echo "versions of the files from OPS.   This is achieved by running"
echo "crds_repair_cache (included with the CRDS client)"
echo "with appropriate parameters in the pipeline environment."
echo "This extra TEST step is necessary to avoid ham-fisted file"
echo "replacements in OPS or user environments,  where blindly replacing rules"
echo "either results in obscuring OPS inconsistencies/errors or losing "
echo "any experimental customizations a user may have done."
echo "-----------------------------------------------------------"
