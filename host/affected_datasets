#! /bin/csh

source /home/crds/.setenv

if ($#argv < 2) then
    echo "usage: `basename $0` <old_context> <new_context> [fast] [mail] [official] [extra bestrefs switches...]"
    exit 1
endif

setenv CRDS_CLIENT_RETRY_COUNT  5
setenv CRDS_CLIENT_RETRY_DELAY_SECONDS 30

set old_context = $1;  shift;
set new_context = $1;  shift;

if ($1 == "fast") then
    shift;
    set switches = "--diffs-only --datasets-since=auto"
else
    if ("$*" == "") then
        set switches = "--all-instruments"
    else
        set switches = ""   # e.g. add --instruments wfc3 to $*
    endif
endif

if ( $1 == "mail" ) then
    shift;
    set output_mail=1
else
    set output_mail=0
endif

if ( $1 == "official" ) then
    shift;
    set official=1
else
    set official=0
endif

set date = `datetag`
set header = "CRDS $CRDS_PROJECT $CRDS_USECASE datasets affected $old_context --> $new_context"

# rip out the ints so csh < works,  e.g. hst_0200.pmap --> 0200
set old = `echo ${old_context} | cut -d'_' -f2`
set old = `echo ${old} | cut -d'.' -f1`  
set new = `echo ${new_context} | cut -d'_' -f2`
set new = `echo ${new} | cut -d'.' -f1`
if ( $official ) then
    set output_dir="${CRDS}/monitor_reprocessing/`datetag`_${old}_${new}"
else
    set output_dir="`pwd`/`datetag`_${old}_${new}"
endif
mkdir -p $output_dir
cd $output_dir

echo >bestrefs_err.txt
(   echo "--------------------------------------------------------------------------------------------------------------"; \
    echo "$header on $date"; \
    echo "--------------------------------------------------------------------------------------------------------------"; \
    python -m crds.bestrefs --old-context $old_context --new-context $new_context \
      --stats --print-update-counts --dump-unique-errors --print-affected --dump-cmdline \
      --na-differences-matter --undefined-differences-matter $switches $* >affected_ids.txt; \
    echo $status >bestrefs.status; \
) |& tee bestrefs_err.txt

setenv bestrefs_status `cat bestrefs.status`

if ($bestrefs_status == 0) then
    set disposition="OK"
else if ($bestrefs_status == 1) then
    set disposition="ERRORS"
else
    set disposition="FAILED"
endif

set affected_count=`wc -l affected_ids.txt | cut -d' ' -f1`

set subject="${disposition}: $header : $affected_count affected"

(echo "--------------------------------------------------------------------------------------------------------------"; \
 echo "$subject"; \
 echo "--------------------------------------------------------------------------------------------------------------"; \
) |& tee -a bestrefs_err.txt

# When things go really badly, error logs can approach a gigabyte,  enough to gag thunderbird even if
# the mailer will actually send the attachment.  So,  instead,  create a truncated error file.

# truncated is a misnomer.   "snipped" would have been better.

if (`wc -l bestrefs_err.txt | cut -d' ' -f1` < 400) then
    cp bestrefs_err.txt bestrefs_err_truncated.txt
else
    head -n 200 bestrefs_err.txt >bestrefs_err_truncated.txt
    echo ".... <snip> ...." >>bestrefs_err_truncated.txt
    tail -n 200 bestrefs_err.txt >>bestrefs_err_truncated.txt
endif

gzip bestrefs_err.txt
gzip affected_ids.txt

if ( $output_mail ) then
    mail -r crds-servers@stsci.edu -a`pwd`/bestrefs_err_truncated.txt -a`pwd`/affected_ids.txt.gz -s "$subject" $CRDS_AFFECTED_DATASETS_RECIPIENTS </dev/null
endif

 # XXXXX gzipped file serves as process completion marker in jsonapi.views
gzip bestrefs_err_truncated.txt   

