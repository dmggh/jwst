#-*-sh-*-

limit stacksize 64000k
# limit memorylocked 512k

setenv TZ 'America/New_York'

setenv  CRDS_SERVER `uname -n | cut -d'.' -f1`

# CRDS and CRDS_STACK,  same pattern,  different dirs,  override below as needed
setenv SERVER_LOCAL /crds/data1/${CRDS_SERVER}
setenv CRDS /crds/data1/server_local
# if (! -d $CRDS) then
#     ln -s $SERVER_LOCAL $CRDS
# endif

setenv XDG_CONFIG_HOME $CRDS/xdg_config
mkdir -p $XDG_CONFIG_HOME/astropy

setenv URP_TYPE crds

# Key controlling server tracking of remote pipeline context sync.
# Due to pipeline setup simplicity,  same key used by both HST and JWST
# pipelines,  differentiated by targeted server.
# Ironically key for less important /grp/crds/cache is fully differentiated
# by project.   These keys are currently standardized by project as
# the server database is mirrored from OPS on down.  Differentiating keys
# by usecase would require a post-mirroring database tweak.
setenv CRDS_PIPELINE_CACHE_KEY 12ca7bb2-dd3b-444a-8e6e-d8fd0bf559ed
setenv CRDS_SERVER_CACHE_KEY 07e56a9e-7462-459e-8a18-6ff5defb2c47

# In case of emergency,  break glass
# setenv CRDS_FITS_VERIFY_CHECKSUM 0

switch ($CRDS_SERVER)
       case dljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw
       case dlhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw

       case tljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE test
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw
       case tlhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE test
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
       breaksw

       case pljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ops
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case plhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE ops
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 78b96cd6-4295-4215-89ff-a588b2ea831a
       breaksw

       case iljwdmsacrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ait
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsbcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE bit
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsccrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-10
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE cit
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

endsw

setenv META_PREFIX ${CRDS_STACK}

setenv CRDS_SERVER_ISILON /ifs/crds/${CRDS_PROJECT}/${CRDS_USECASE}
setenv CRDS_IFS  /crds/data1/server_isilon
setenv CRDS_FILE_CACHE ${CRDS_IFS}/file_cache
setenv CRDS_SERVER_FILES ${CRDS_IFS}/server_files
setenv CRDS_CRON {$CRDS}/server/logs/cron
setenv CRDS_LOG_TIME 1
setenv CRDS_USE_PICKLED_CONTEXTS 1
setenv CRDS_READONLY_CACHE 1

# if (! -d $CRDS_IFS ) then
#     ln -s $CRDS_SERVER_ISILON   $CRDS_IFS
# endif

# Enabling both of the below permits non-compliant keyword values (according to 
# SSB JWST data model schema) to be certied with a warning and added to rmaps.

# SSB JWST data model setting to avoid omitting keywords with invalid schema values.
# The default behavior is that the keyword is entirely suppressed and appears to be missing.
setenv PASS_INVALID_VALUES 1

# CRDS setting to keep SSB JWST data model warnings from being re-mapped to errors.
# setenv CRDS_ALLOW_SCHEMA_VIOLATIONS 1

setenv PATH ${CRDS}/python/bin:${CRDS}/CRDS_server/host:${CRDS_STACK}/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin
# /usr/stsci/Python-2.7.4/bin:

# setenv LD_LIBRARY_PATH ${CRDS_STACK}/lib # :/usr/stsci/Python-2.7.4/lib

if ! $?PYTHONPATH then
    setenv PYTHONPATH ${CRDS_STACK}/lib/python
else
    setenv PYTHONPATH ${PYTHONPATH}:${CRDS_STACK}/lib/python    
endif

setenv apachemod ${CRDS_STACK}/lib/apache/

setenv EDITOR emacs

source ${HOME}/.alias

# printenv | grep CRDS

