#-*sh-*-

# /crds/data1/isilon
#    server_files
#       ingest
#       uploads
#       deliveries
#    file_cache
# /crds/data1/persistent_local
#   logs
#   backups
#   reprocessing
#   regressions
#   secrets
# /crds/data1/volatile_local

# setenv CRDS /crds/data1/server_local

setenv CRDS_SERVER_TYPE mod_wsgi

# Location of CRDS VM local storage,  nominally mounted into container
setenv CRDS_ROOT  /crds/data1
setenv CRDS_SERVER `uname -n | cut -d'.' -f1`

# Nominally container storage which is lost when the next image/container is installed
setenv CRDS_VOLATILE_LOCAL ${CRDS_ROOT}/volatile_local

# Nominally storage internal to the CRDS VM which is kept permanently
setenv CRDS_PERSISTENT_LOCAL ${CRDS_ROOT}/persistent_local

# Classic name for both persistent and volatile prior to partitioning
setenv CRDS ${CRDS_VOLATILE_LOCAL}

# Development sources used for image construction
setenv CRDS_STACK_SOURCES ${CRDS_VOLATILE_LOCAL}/stack_sources
setenv CRDS_CLIENT_SOURCES ${CRDS_VOLATILE_LOCAL}/CRDS
setenv CRDS_SERVER_SOURCES ${CRDS_VOLATILE_LOCAL}/CRDS_server

# Installed code and configuration for CRDS image
setenv CRDS_STACK ${CRDS_VOLATILE_LOCAL}/stack
setenv CRDS_SERVER_SETUP ${CRDS_VOLATILE_LOCAL}/server
setenv CRDS_STATIC_DIR  ${CRDS_SERVER_SETUP}/static
setenv CRDS_SERVER_SCRIPTS ${CRDS_SERVER_SETUP}/bin

setenv CRDS_PYTHON python3.6

# Provide defaults for the CRDS Apache port depending on mode flag file in $HOME
if ( -f /home/crds/CRDS_SERVER_OFFLINE ) then
    setenv CRDS_PORT 8002
    setenv CRDS_BACKUP_MODE 1
else
    setenv CRDS_PORT 8001
    setenv CRDS_BACKUP_MODE 0
endif

switch ($CRDS_SERVER)
       case tlcrdsswys:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE syslab
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_SERVER_URL https://tlcrdssys.actlab.stsci.edu:8001
       breaksw

       case dljwcrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_SERVER_URL https://jwst-crds-dev.stsci.edu
        setenv CRDS_SERVER_IP 10.128.19.170
        setenv CRDS_MOCK_ARCHIVE_PARAMETERS jwst-b7.2-iljwdmscarc1-2018-11-19.json
        setenv CRDS_DISTRIBUTION_STATES archived,operational,delivered,submitted,archiving
        setenv CRDS_STATUS_TO_ADDRESSES jmiller@stsci.edu
        setenv CRDS_STATUS_CONFIRM_ADDRESSES jmiller@stsci.edu
        setenv CRDS_DEBUG 1
        setenv CRDS_DEBUG_EXTRAS 0
        setenv CRDS_FORCE_REMOTE_MODE 0
        setenv CRDS_INSTALL_DIR ${CRDS_STACK}/lib/${CRDS_PYTHON}/site-packages/crds_server
       breaksw

       case dlhstcrds:
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_SERVER_URL https://hst-crds-dev.stsci.edu
       breaksw

       case tljwcrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE test
        setenv CRDS_SERVER_URL https://jwst-crds-test.stsci.edu
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw
       case tlhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE test
        setenv CRDS_SERVER_URL https://hst-crds-test.stsci.edu
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
       breaksw

       case pljwcrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ops
        setenv CRDS_SERVER_URL https://jwst-crds.stsci.edu
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case plhstcrds:
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE ops
        setenv CRDS_SERVER_URL https://hst-crds.stsci.edu
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 78b96cd6-4295-4215-89ff-a588b2ea831a
       breaksw

       # ATM pljwcrds is A-string,  not integrated with DMS A-string
       case iljwdmsacrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ait
        setenv CRDS_SERVER_URL https://jwst-crds-ait.stsci.edu
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsbcrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE bit
        setenv CRDS_SERVER_URL https://jwst-crds-bit.stsci.edu
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsccrds:
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE cit
        setenv CRDS_SERVER_URL https://jwst-crds-cit.stsci.edu
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw
       
       # tlcrds
endsw

# ----------------------------------------------------------------------
# META_PREFIX is value used for installation ./configure --prefix, the CRDS
# version of /usr/local used by the ./meta package system used to handle
# packages third party packages not available through conda.  Here we make it
# overlap with and synonymous to the conda stack.
# ----------------------------------------------------------------------
setenv META_PREFIX ${CRDS_STACK}
setenv PATH ${CRDS_SERVER_SCRIPTS}:${CRDS_STACK}/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin

# ----------------------------------------------------------------------
# Persistent mutable server files,  stored outside containers,  higher security
# Typically 50-100G total
# ----------------------------------------------------------------------
setenv CRDS_PERSISTENT_LOCAL ${CRDS_ROOT}/persistent_local
setenv CRDS_SERVER_LOGS ${CRDS_PERSISTENT_LOCAL}/server_logs
setenv CRDS_CRON_LOGS ${CRDS_PERSISTENT_LOCAL}/cron_logs
setenv CRDS_PROFILES ${CRDS_PERSISTENT_LOCAL}/profiles
setenv CRDS_REGRESSIONS ${CRDS_PERSISTENT_LOCAL}/regressions
setenv CRDS_REPROCESSING ${CRDS_PERSISTENT_LOCAL}/monitor_reprocessing
setenv CRDS_BACKUPS ${CRDS_PERSISTENT_LOCAL}/backups
setenv CRDS_SECRETS ${CRDS_PERSISTENT_LOCAL}/secrets

# ----------------------------------------------------------------------
# Isilon files,  high volume, cross-mounted to DMS,  lower security + interfaces
# 2T - 5T total, depending on project needs.
# ----------------------------------------------------------------------
# "Physical" VM Isilon allocation and mount point
setenv CRDS_ISILON /ifs/crds/${CRDS_PROJECT}/${CRDS_USECASE}

# Abstract link or container mount point to for Isilon
# By putting this outside Isilon,  can point to Isilon in generic way
setenv CRDS_IFS  ${CRDS_ROOT}/server_isilon

# Abstract CRDS_PATH for Isilon subdirectory for server CRDS cache
setenv CRDS_FILE_CACHE ${CRDS_IFS}/file_cache
setenv CRDS_PATH  ${CRDS_ISILON}/file_cache

# High volume mutable files like deliveries to the CRDS poller, ingests, and uploads
# This would have been better named CRDS_SERVER_FILES, for large scale server data.
setenv CRDS_SERVER_FILES ${CRDS_IFS}/server_files

# Externally exposed / cross-mounted Isilon directories
setenv CRDS_DELIVERY_DIR ${CRDS_SERVER_FILES}/deliveries #  To DMS CRDS poller VM,  contents deleted when deliveries complete
setenv CRDS_INGEST_DIR ${CRDS_SERVER_FILES}/ingest       #  To machines doing submissions via command line, web upload widget

# Private internal server directories
setenv CRDS_CATALOG_DIR ${CRDS_SERVER_FILES}/catalogs   # Permanent file manifests for CRDS poller deliveries,  never deleted
setenv CRDS_UPLOADS_DIR ${CRDS_SERVER_FILES}/uploads    # Simple web file uploads    

# ----------------------------------------------------------------------
# These keys correspond to sync echoes from CRDS cache syncs which are
# tracked on the server as evidence of sync command execution and success.
# The server's operational context records the intended universal default.
# These keys correspond to sync'ed defaults in critical "official" caches.
# On the website,  these are the "remote contexts".
# ----------------------------------------------------------------------

# DMS pipeline's cache sync key
setenv CRDS_PIPELINE_CACHE_KEY 12ca7bb2-dd3b-444a-8e6e-d8fd0bf559ed

# CRDS server's internal cache, also tracked,  not so remote...
setenv CRDS_SERVER_CACHE_KEY 07e56a9e-7462-459e-8a18-6ff5defb2c47

# A third key tracks the sync for /grp/crds/cache,  there may be others which
# also have a presence in the CRDS server database.

# -----------------------------------------------------------------------------
# In FITS checksums become a performance or functional issue, uncomment
# -----------------------------------------------------------------------------
# setenv CRDS_FITS_VERIFY_CHECKSUM 0

# -----------------------------------------------------------------------------
# JWST CAL datamodels behavior control
# ----------------------------------------------------------------------------
# SSB JWST data model setting to avoid omitting keywords with invalid schema values.
# The default behavior is that the keyword is mapped to None which is equivalent to 
# UNDEFINED when in actuality the value is just invalid.  Setting this enables using
# the value after ignoring the CAL datamodels warning.
setenv PASS_INVALID_VALUES 1

# -----------------------------------------------------------------------------
# CRDS Python log messages should include time
# -----------------------------------------------------------------------------
setenv CRDS_LOG_TIME 1

# -----------------------------------------------------------------------------
# CRDS contexts can be loaded from a single pickle which reduces network file
# opens from roughly 120 to 1.  If needed it can probably be turned off, it is
# most likely an obsolete performance optimization to reduce stress on Isilon
# and eliminate 12 second loads not seen on normal file systems.
# -----------------------------------------------------------------------------
setenv CRDS_USE_PICKLED_CONTEXTS 1

# -----------------------------------------------------------------------------
# Configuring the CRDS cache behavior as readonly by default is intended to
# improve cache stability for the pipeline should it cross-mount the server's
# internal cache.  Cross mounting is an option we've considerede to eliminate
# explicit pipeline syncs to a dedicated pipeline cache.  
#
# Without this setting the CRDS cache may update in response to admin shell
# commands with CRDS tools, potentially glitching the pipeline even if the
# cache does not change.  The read/write default is more appropriate for end
# users who are not using massive parallelism like a pipeline and just need
# CRDS caching to work transparently and automatically.
#
# This is a conservative setting which is not absolutely required and actually
# pushing the envelope since sharing the internal cache is not being done at this
# time and the first 4 years of CRDS operations didn't use it.
# -----------------------------------------------------------------------------
setenv CRDS_READONLY_CACHE 1

setenv DJANGO_SETTINGS_MODULE crds_server.settings

setenv XDG_CONFIG_HOME $CRDS/xdg_config
mkdir -p $XDG_CONFIG_HOME/astropy

setenv OPENSSL_NO_DEFAULT_ZLIB 1

setenv URP_TYPE crds

# Not sure if this is entirely internal to CRDS,  leaving lowercase wart alone
setenv apachemod ${CRDS_STACK}/lib/apache/

setenv EDITOR emacs

limit stacksize 64000k
# limit memorylocked 512k

setenv TZ 'America/New_York'

source /home/crds/.alias

