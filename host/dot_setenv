#-*-sh-*-

# setenv CRDS /crds/data1/server_local

# Location of CRDS VM local storage,  nominally mounted into container
setenv CRDS_ROOT  /crds/data1

# /crds/data1/isilon
#    server_files
#       ingest
#       uploads
#       deliveries
#    file_cache
# /crds/data1/persistent_local
#   logs
#   backups
#   reprocessing
#   regressions
# /crds/container_local

# Location of CRDS custom Python stack,
setenv CRDS_STACK ${CRDS_ROOT}/stack

setenv CRDS_SERVER `uname -n | cut -d'.' -f1`
setenv CRDS_SERVER_LOCAL ${CRDS_ROOT}/${CRDS_SERVER}

setenv CRDS ${CRDS_LOCAL}/server


switch ($CRDS_SERVER)
       case tlcrdssys:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE syslab
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw

       case dljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw
       case dlhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE dev
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw

       case tljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE test
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
       breaksw
       case tlhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE test
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
       breaksw

       case pljwcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ops
        # setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case plhstcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT hst
        setenv CRDS_USECASE ops
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu   crds_datamng@stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 78b96cd6-4295-4215-89ff-a588b2ea831a
       breaksw

       case iljwdmsacrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE ait
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsbcrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE bit
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

       case iljwdmsccrds:
        setenv CRDS_STACK ${CRDS}/crds_stacks/crds_conda3-11
        setenv CRDS_PROJECT jwst
        setenv CRDS_USECASE cit
        setenv CRDS_AFFECTED_DATASETS_RECIPIENTS "jmiller@stsci.edu  crds_${CRDS_PROJECT}_${CRDS_USECASE}_reprocessing@maillist.stsci.edu"
        setenv CRDS_GRP_CACHE_KEY 3d15844c-62a0-4a00-bedc-fafdb34f4a2c
       breaksw

endsw

# ----------------------------------------------------------------------
# META_PREFIX is value used for installation ./configure --prefix, the CRDS
# version of /usr/local used by the ./meta package system used to handle
# packages third party packages not available through conda.  Here we make it
# overlap with and synonymous to the conda stack.
# ----------------------------------------------------------------------
setenv META_PREFIX ${CRDS_STACK}
setenv PATH ${CRDS_STACK}/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin

# ----------------------------------------------------------------------
# Persistent mutable server files,  stored outside containers
# ----------------------------------------------------------------------
setenv CRDS_PERSISTENT_LOCAL ${CRDS_ROOT}/persistent_local
setenv CRDS_SERVER_LOGS ${CRDS_PERSISTENT_LOCAL}/server_logs
setenv CRDS_CRON_LOGS ${CRDS_PERSISTENT_LOCAL}/cron_logs
setenv CRDS_REGRESSIONS ${CRDS_PERSISTENT_LOCAL}/regressions
setenv CRDS_REPROCESSING ${CRDS_PERSISTENT_LOCAL}/reprocessing
setenv CRDS_BACKUPS ${CRDS_PERSISTENT_LOCAL}/backups
setenv CRDS_SECRETS ${CRDS_PERSISTENT_LOCAL}/secrets

# ----------------------------------------------------------------------
# Immutable server files,  can be generated inside containers,  not 
# not intended for export and visible as part of any public image.
# ----------------------------------------------------------------------
setenv CRDS_CONTAINER_LOCAL ${CRDS_ROOT}/container_local

# ----------------------------------------------------------------------
# Isilon files,  high volume, cross-mounted to DMS
# ----------------------------------------------------------------------
# "Physical" VM Isilon allocation and mount point
setenv CRDS_ISILON /ifs/crds/${CRDS_PROJECT}/${CRDS_USECASE}
setenv CRDS_PATH  ${CRDS_ISILON}/file_cache

# Abstract link or container mount point to for Isilon
setenv CRDS_IFS  ${CRDS_ROOT}/server_isilon

# Abstract CRDS_PATH for container
setenv CRDS_FILE_CACHE ${CRDS_IFS}/file_cache

# High volume mutable files like deliveries to the CRDS poller, ingests, and uploads
setenv CRDS_SERVER_FILES ${CRDS_IFS}/server_files

# ----------------------------------------------------------------------
# These keys correspond to sync echoes from CRDS cache syncs which are
# tracked on the server as evidence of sync command execution and success.
# The server's operational context records the intended universal default.
# These keys correspond to sync'ed defaults in critical "official" caches.
# On the website,  these are the "remote contexts".
# ----------------------------------------------------------------------

# DMS pipeline's cache sync key
setenv CRDS_PIPELINE_CACHE_KEY 12ca7bb2-dd3b-444a-8e6e-d8fd0bf559ed

# CRDS server's internal cache, also tracked,  not so remote...
setenv CRDS_SERVER_CACHE_KEY 07e56a9e-7462-459e-8a18-6ff5defb2c47

# A third key tracks the sync for /grp/crds/cache,  there may be others which
# also have a presence in the CRDS server database.

# -----------------------------------------------------------------------------
# In FITS checksums become a performance or functional issue, uncomment
# -----------------------------------------------------------------------------
# setenv CRDS_FITS_VERIFY_CHECKSUM 0

# -----------------------------------------------------------------------------
# JWST CAL datamodels behavior control
# ----------------------------------------------------------------------------
# SSB JWST data model setting to avoid omitting keywords with invalid schema values.
# The default behavior is that the keyword is mapped to None which is equivalent to 
# UNDEFINED when in actuality the value is just invalid.  Setting this enables using
# the value after ignoring the CAL datamodels warning.
setenv PASS_INVALID_VALUES 1

# -----------------------------------------------------------------------------
# CRDS Python log messages should include time
# -----------------------------------------------------------------------------
setenv CRDS_LOG_TIME 1

# -----------------------------------------------------------------------------
# CRDS contexts can be loaded from a single pickle which reduces network file
# opens from roughly 120 to 1.  If needed it can probably be turned off, it is
# most likely an obsolete performance optimization to reduce stress on Isilon
# and eliminate 12 second loads not seen on normal file systems.
# -----------------------------------------------------------------------------
setenv CRDS_USE_PICKLED_CONTEXTS 1

# -----------------------------------------------------------------------------
# Configuring the CRDS cache behavior as readonly by default is intended to
# improve cache stability for the pipeline should it cross-mount the server's
# internal cache.  Cross mounting is an option we've considerede to eliminate
# explicit pipeline syncs to a dedicated pipeline cache.  
#
# Without this setting the CRDS cache may update in response to admin shell
# commands with CRDS tools, potentially glitching the pipeline even if the
# cache does not change.  The read/write default is more appropriate for end
# users who are not using massive parallelism like a pipeline and just need
# CRDS caching to work transparently and automatically.
#
# This is a conservative setting which is not absolutely required and actually
# pushing the envelope since sharing the internal cache is not being done at this
# time and the first 4 years of CRDS operations didn't use it.
# -----------------------------------------------------------------------------
setenv CRDS_READONLY_CACHE 1

setenv XDG_CONFIG_HOME $CRDS/xdg_config
mkdir -p $XDG_CONFIG_HOME/astropy

setenv URP_TYPE crds

# Not sure if this is entirely internal to CRDS,  leaving lowercase wart alone
setenv apachemod ${CRDS_STACK}/lib/apache/

setenv EDITOR emacs

limit stacksize 64000k
# limit memorylocked 512k

setenv TZ 'America/New_York'

source /home/crds/.alias


